diff --git a/src/lib.rs b/src/lib.rs
index 6ba34fc..928e602 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -303,8 +303,8 @@ pub enum RenderNodeInfo {
     Strikeout(Vec<RenderNode>),
     /// A code region
     Code(Vec<RenderNode>),
-    /// An image (title)
-    Img(String),
+    /// An image (title, src)
+    Img(String, String),
     /// A block element with children
     Block(Vec<RenderNode>),
     /// A header (h1, h2, ...) with children
@@ -351,7 +351,7 @@ impl RenderNode {
     pub fn new(info: RenderNodeInfo) -> RenderNode {
         RenderNode {
             size_estimate: Cell::new(None),
-            info: info,
+            info,
         }
     }
 
@@ -366,7 +366,7 @@ impl RenderNode {
 
         // Otherwise, make an estimate.
         let estimate = match self.info {
-            Text(ref t) | Img(ref t) => {
+            Text(ref t) | Img(ref t, _) => {
                 let len = t.trim().len();
                 SizeEstimate {
                     size: len,
@@ -419,7 +419,7 @@ fn precalc_size_estimate<'a>(node: &'a RenderNode) -> TreeMapResult<(), &'a Rend
         return TreeMapResult::Nothing;
     }
     match node.info {
-        Text(_) | Img(_) | Break | FragStart(_) => {
+        Text(_) | Img(_, _) | Break | FragStart(_) => {
             let _ = node.get_size_estimate();
             TreeMapResult::Nothing
         }
@@ -883,9 +883,13 @@ fn process_dom_node<'a, 'b, T: Write>(
                     }
                 }
                 expanded_name!(html "em") => pending(handle, |_, cs| Some(RenderNode::new(Em(cs)))),
+                expanded_name!(html "i") => pending(handle, |_, cs| Some(RenderNode::new(Em(cs)))),
                 expanded_name!(html "strong") => {
                     pending(handle, |_, cs| Some(RenderNode::new(Strong(cs))))
                 }
+                expanded_name!(html "b") => {
+                    pending(handle, |_, cs| Some(RenderNode::new(Strong(cs))))
+                }
                 expanded_name!(html "s") => {
                     pending(handle, |_, cs| Some(RenderNode::new(Strikeout(cs))))
                 }
@@ -895,14 +899,26 @@ fn process_dom_node<'a, 'b, T: Write>(
                 expanded_name!(html "img") => {
                     let borrowed = attrs.borrow();
                     let mut title = None;
+                    let mut src = None;
                     for attr in borrowed.iter() {
-                        if &attr.name.local == "alt" {
+                        if &attr.name.local == "src" {
+                            src = Some(&*attr.value);
+                            if title.is_some() {
+                                break;
+                            }
+                        } else if &attr.name.local == "alt" {
                             title = Some(&*attr.value);
-                            break;
+                            if src.is_some() {
+                                break;
+                            }
                         }
                     }
-                    if let Some(title) = title {
-                        Finished(RenderNode::new(Img(title.into())))
+                    if let Some(src) = src {
+                        if let Some(title) = title {
+                            Finished(RenderNode::new(Img(title.into(), src.into())))
+                        } else {
+                            Finished(RenderNode::new(Img(String::new(), src.into())))
+                        }
                     } else {
                         Nothing
                     }
@@ -1143,8 +1159,8 @@ fn do_render_node<'a, 'b, T: Write, R: Renderer>(
                 Some(None)
             })
         }
-        Img(title) => {
-            builder.add_image(&title);
+        Img(title, src) => {
+            builder.add_image(&title, &src);
             Finished(None)
         }
         Block(children) => {
@@ -1155,15 +1171,10 @@ fn do_render_node<'a, 'b, T: Write, R: Renderer>(
             })
         }
         Header(level, children) => {
-            let prefix = builder.header_prefix(level);
-            let min_width = max(builder.width(), 1 + prefix.len());
-            let sub_builder = builder.new_sub_renderer(min_width - prefix.len());
-            builder.push(sub_builder);
-            pending2(children, move |builder: &mut BuilderStack<R>, _| {
-                let sub_builder = builder.pop();
-
+            builder.start_header(level);
+            pending2(children, |builder: &mut BuilderStack<R>, _| {
                 builder.start_block();
-                builder.append_subrender(sub_builder, repeat(&prefix[..]));
+                builder.end_header();
                 builder.end_block();
                 Some(None)
             })
diff --git a/src/render/mod.rs b/src/render/mod.rs
index 8b9e25d..4fcf68c 100644
--- a/src/render/mod.rs
+++ b/src/render/mod.rs
@@ -96,11 +96,14 @@ pub trait Renderer {
     /// End a code region
     fn end_code(&mut self);
 
-    /// Add an image
-    fn add_image(&mut self, title: &str);
+    /// Start a header region
+    fn start_header(&mut self, level: usize);
+
+    /// Finish a header text started earlier.
+    fn end_header(&mut self);
 
-    /// Get prefix string of header in specific level.
-    fn header_prefix(&mut self, level: usize) -> String;
+    /// Add an image
+    fn add_image(&mut self, title: &str, src: &str);
 
     /// Get prefix string of quoted block.
     fn quote_prefix(&mut self) -> String;
diff --git a/src/render/text_renderer.rs b/src/render/text_renderer.rs
index b1b624b..72686b4 100644
--- a/src/render/text_renderer.rs
+++ b/src/render/text_renderer.rs
@@ -501,10 +501,13 @@ pub trait TextDecorator {
     fn decorate_preformat_cont(&mut self) -> Self::Annotation;
 
     /// Return an annotation and rendering prefix for a link.
-    fn decorate_image(&mut self, title: &str) -> (String, Self::Annotation);
+    fn decorate_image(&mut self, title: &str, src: &str) -> (String, Self::Annotation);
 
-    /// Return prefix string of header in specific level.
-    fn header_prefix(&mut self, level: usize) -> String;
+    /// Return an annotation and rendering perfix for a header
+    fn decorate_header_start(&mut self, level: usize) -> (String, Self::Annotation);
+
+    /// Return a suffix for after a header
+    fn decorate_header_end(&mut self) -> String;
 
     /// Return prefix string of quoted block.
     fn quote_prefix(&mut self) -> String;
@@ -1211,19 +1214,24 @@ impl<D: TextDecorator> Renderer for TextRenderer<D> {
             self.ann_stack.pop();
         }
     }
-    fn add_image(&mut self, title: &str) {
-        if let Some((s, tag)) = self.decorator.as_mut().map(|d| d.decorate_image(title)) {
-            self.ann_stack.push(tag);
+    fn start_header(&mut self, level: usize) {
+        if let Some((s, annotation)) = self.decorator.as_mut().map(|d| d.decorate_header_start(level)) {
+            self.ann_stack.push(annotation);
+            self.add_inline_text(&s);
+            self.add_inline_text("\n");
+        }
+    }
+    fn end_header(&mut self) {
+        if let Some(s) = self.decorator.as_mut().map(|d| d.decorate_header_end()) {
             self.add_inline_text(&s);
             self.ann_stack.pop();
         }
     }
-
-    fn header_prefix(&mut self, level: usize) -> String {
-        if let Some(d) = self.decorator.as_mut() {
-            d.header_prefix(level)
-        } else {
-            "".to_owned()
+    fn add_image(&mut self, title: &str, src: &str) {
+        if let Some((s, tag)) = self.decorator.as_mut().map(|d| d.decorate_image(title, src)) {
+            self.ann_stack.push(tag);
+            self.add_inline_text(&s);
+            self.ann_stack.pop();
         }
     }
 
@@ -1321,6 +1329,14 @@ impl TextDecorator for PlainDecorator {
         "`".to_string()
     }
 
+    fn decorate_header_start(&mut self, _: usize) -> (String, Self::Annotation) {
+        ("".to_string(), ())
+    }
+
+    fn decorate_header_end(&mut self) -> String {
+        "".to_string()
+    }
+
     fn decorate_preformat_first(&mut self) -> Self::Annotation {
         ()
     }
@@ -1328,14 +1344,10 @@ impl TextDecorator for PlainDecorator {
         ()
     }
 
-    fn decorate_image(&mut self, title: &str) -> (String, Self::Annotation) {
+    fn decorate_image(&mut self, title: &str, _src: &str) -> (String, Self::Annotation) {
         (format!("[{}]", title), ())
     }
 
-    fn header_prefix(&mut self, level: usize) -> String {
-        "#".repeat(level) + " "
-    }
-
     fn quote_prefix(&mut self) -> String {
         "> ".to_string()
     }
@@ -1417,6 +1429,14 @@ impl TextDecorator for TrivialDecorator {
         "".to_string()
     }
 
+    fn decorate_header_start(&mut self, _: usize) -> (String, Self::Annotation) {
+        ("".to_string(), ())
+    }
+
+    fn decorate_header_end(&mut self) -> String {
+        "".to_string()
+    }
+
     fn decorate_preformat_first(&mut self) -> Self::Annotation {
         ()
     }
@@ -1424,15 +1444,11 @@ impl TextDecorator for TrivialDecorator {
         ()
     }
 
-    fn decorate_image(&mut self, title: &str) -> (String, Self::Annotation) {
+    fn decorate_image(&mut self, title: &str, _src: &str) -> (String, Self::Annotation) {
         // FIXME: this should surely be the alt text, not the title text
         (title.to_string(), ())
     }
 
-    fn header_prefix(&mut self, _level: usize) -> String {
-        "".to_string()
-    }
-
     fn quote_prefix(&mut self) -> String {
         "".to_string()
     }
@@ -1468,7 +1484,7 @@ pub enum RichAnnotation {
     /// A link with the target.
     Link(String),
     /// An image (attached to the title text)
-    Image,
+    Image(String),
     /// Emphasised text, which might be rendered in bold or another colour.
     Emphasis,
     /// Strong text, which might be rendered in bold or another colour.
@@ -1477,6 +1493,8 @@ pub enum RichAnnotation {
     Strikeout,
     /// Code
     Code,
+    /// Header (level)
+    Header(usize),
     /// Preformatted; true if a continuation line for an overly-long line.
     Preformat(bool),
 }
@@ -1538,6 +1556,14 @@ impl TextDecorator for RichDecorator {
         "`".to_string()
     }
 
+    fn decorate_header_start(&mut self, level: usize) -> (String, Self::Annotation) {
+        ("".to_string(), RichAnnotation::Header(level))
+    }
+
+    fn decorate_header_end(&mut self) -> String {
+        "".to_string()
+    }
+
     fn decorate_preformat_first(&mut self) -> Self::Annotation {
         RichAnnotation::Preformat(false)
     }
@@ -1546,12 +1572,8 @@ impl TextDecorator for RichDecorator {
         RichAnnotation::Preformat(true)
     }
 
-    fn decorate_image(&mut self, title: &str) -> (String, Self::Annotation) {
-        (title.to_string(), RichAnnotation::Image)
-    }
-
-    fn header_prefix(&mut self, level: usize) -> String {
-        "#".repeat(level) + " "
+    fn decorate_image(&mut self, title: &str, src: &str) -> (String, Self::Annotation) {
+        (title.to_string(), RichAnnotation::Image(src.to_string()))
     }
 
     fn quote_prefix(&mut self) -> String {
